name: Build Windows bundle (manual)

on:
  workflow_dispatch:
    inputs:
      skip_smoke:
        description: 'Set to true to skip the smoke test and always produce the dist artifact'
        required: false
        default: 'false'

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      SKIP_SMOKE_TEST: ${{ github.event.inputs.skip_smoke }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure packaging/windows present (restore if needed)
        shell: pwsh
        run: |
          Write-Output "Ensuring packaging/windows exists in the checkout..."
          # show current top-level files
          Write-Output "Top-level files and dirs:"
          Get-ChildItem -Path $Env:GITHUB_WORKSPACE -Force | ForEach-Object { Write-Output $_.Name }

          # Attempt to restore packaging/windows from the fetched origin/main in case sparse checkout excluded it
          git fetch origin main --depth=1
          if (!(Test-Path "$Env:GITHUB_WORKSPACE\packaging\windows")) {
            Write-Output "packaging/windows missing; attempting to checkout from origin/main"
            git checkout origin/main -- packaging/windows || git restore --source=origin/main packaging/windows -v
          } else {
            Write-Output "packaging/windows already present"
          }

          Write-Output "packaging directory listing:"
          Get-ChildItem -Path "$Env:GITHUB_WORKSPACE\packaging" -Recurse -Depth 2 | ForEach-Object { Write-Output $_.FullName }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Prepare packaging folder
        shell: pwsh
        run: |
          # Create packaging/ffmpeg if missing and download a static ffmpeg build
          mkdir -Force packaging\\ffmpeg
          Write-Host "Downloading ffmpeg (essentials build)..."
          $zip = "ffmpeg.zip"
          Invoke-WebRequest -Uri 'https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip' -OutFile $zip
          Expand-Archive -Path $zip -DestinationPath packaging\\ffmpeg -Force
          # Locate ffmpeg.exe and ffprobe.exe
          $f = Get-ChildItem -Path packaging\\ffmpeg -Recurse -Filter ffmpeg.exe | Select-Object -First 1
          $p = Get-ChildItem -Path packaging\\ffmpeg -Recurse -Filter ffprobe.exe | Select-Object -First 1
          Copy-Item $f.FullName packaging\\ffmpeg\\ffmpeg.exe -Force
          Copy-Item $p.FullName packaging\\ffmpeg\\ffprobe.exe -Force

      - name: Run build script (debug + run)
        shell: pwsh
        working-directory: ${{ github.workspace }}
        run: |
          # Debug: ensure the script file exists and show attributes
          $scriptRel = 'packaging\windows\build_windows.ps1'
          $scriptAbs = Join-Path $Env:GITHUB_WORKSPACE $scriptRel
          Write-Output "Checking script path: $scriptAbs"
          if (Test-Path $scriptAbs) {
            Write-Output "Script exists. Attributes:"
            Get-Item $scriptAbs | Format-List *
            Write-Output "First 20 lines of the script:" 
            Get-Content $scriptAbs -TotalCount 20 | ForEach-Object { Write-Output "    $_" }
          } else {
            Write-Error "Script not found at $scriptAbs"
            exit 1
          }

          # Prepare to invoke the script: unblock it to avoid execution policy blocks
          Write-Output "Unblocking: $scriptAbs"
          Unblock-File -Path $scriptAbs -ErrorAction SilentlyContinue

          # Resolve the pwsh executable path and call it with -File and the absolute script path
          $pwshExe = (Get-Command pwsh -ErrorAction SilentlyContinue).Source
          if (-not $pwshExe) {
            Write-Error "pwsh not found on PATH"
            exit 1
          }
          Write-Output "Invoking pwsh: $pwshExe -NoProfile -ExecutionPolicy Bypass -File $scriptAbs"
          & $pwshExe -NoProfile -ExecutionPolicy Bypass -File $scriptAbs

      - name: Upload dist for manual download (even on failure)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: MercuryScribe-dist
          path: dist/MercuryScribe

      - name: Upload built artifact
        uses: actions/upload-artifact@v4
        with:
          name: MercuryScribe-windows-x86_64
          path: MercuryScribe-windows-x86_64.zip
