#!/usr/bin/env bash
#
# Run tests for transcribe-with-whisper
#
# Usage:
#   ./bin/run-tests              # Run all tests
#   ./bin/run-tests -v           # Run with verbose output
#   ./bin/run-tests -k test_name # Run specific test
#   ./bin/run-tests --help       # Show pytest help

set -euo pipefail

# Get the script's directory and repository root
SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" )
REPO_ROOT=$(cd "$SCRIPT_DIR/.." )

# Change to repository root
cd "$REPO_ROOT"

echo "üß™ Running tests from: $REPO_ROOT"
echo ""

# Ensure artifacts emitted by integration tests are kept unless caller overrides
if [ -z "${KEEP_ARTIFACTS:-}" ]; then
    export KEEP_ARTIFACTS=1
    echo "üì¶ KEEP_ARTIFACTS not set; defaulting to 1 so generated fixtures are preserved."
fi

# Ensure Hugging Face token is available for integration tests
TRANSCRIPTION_ROOT="${TRANSCRIPTION_DIR:-$REPO_ROOT/transcription-files}"
if [ -z "${HUGGING_FACE_AUTH_TOKEN:-}" ]; then
    TOKEN_FILE="$TRANSCRIPTION_ROOT/.config/hf_token"
    if [ -f "$TOKEN_FILE" ]; then
        # Read first line, trimming whitespace/newlines without echoing token contents
        TOKEN_VALUE=$(head -n 1 "$TOKEN_FILE" | tr -d '\r\n ')
        if [ -n "$TOKEN_VALUE" ]; then
            export HUGGING_FACE_AUTH_TOKEN="$TOKEN_VALUE"
            echo "üîê Loaded Hugging Face token from $TOKEN_FILE"
        fi
    fi
fi

if [ -z "${HUGGING_FACE_AUTH_TOKEN:-}" ]; then
    echo "‚ö†Ô∏è  HUGGING_FACE_AUTH_TOKEN not found. Integration tests that require it will be skipped." >&2
    echo "   Provide a token via the environment or ${TRANSCRIPTION_ROOT}/.config/hf_token to exercise those paths." >&2
fi

# Check if pytest is installed
if ! command -v pytest &> /dev/null; then
    echo "‚ùå pytest not found. Installing..."
    pip install pytest pytest-cov
fi

# Run pytest with all arguments passed through
# Use -v for verbose by default if no args provided
if [ $# -eq 0 ]; then
    exec pytest -v tests/
else
    exec pytest "$@" tests/
fi
