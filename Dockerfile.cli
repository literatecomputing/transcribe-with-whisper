FROM ubuntu:22.04

WORKDIR /app

# Install system dependencies including Python
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update \
    && apt-get install -y --no-install-recommends \
        python3.11 \
        python3.11-venv \
        python3-pip \
        ffmpeg \
        pandoc \
        build-essential \
        git \
        cmake \
        ninja-build \
        pkg-config \
        libavcodec-dev \
        libavformat-dev \
        libavutil-dev \
        libavdevice-dev \
        libavfilter-dev \
        libswscale-dev \
        libswresample-dev \
    && rm -rf /var/lib/apt/lists/*

# Create Python virtual environment
RUN python3.11 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Install the package from PyPI by default; fallback to local copy if you build in-repo
ARG INSTALL_FROM=pypi

# Copy architecture-specific requirements
COPY requirements-amd64.txt requirements-arm64.txt /tmp/

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip setuptools wheel

# Install architecture-specific requirements
RUN if [ "$(uname -m)" = "aarch64" ]; then \
        echo "=== Building for ARM64 - using pyannote.audio 3.4.0 (no torchcodec required) ==="; \
        pip install --no-cache-dir -r /tmp/requirements-arm64.txt; \
    else \
        echo "=== Building for AMD64 - using pyannote.audio 4.0.0 (with torchcodec) ==="; \
        pip install --no-cache-dir -r /tmp/requirements-amd64.txt; \
    fi

# Install console package (pypi or local)
COPY . /app
RUN if [ "$INSTALL_FROM" = "local" ]; then \
        pip install --no-cache-dir . ; \
    else \
        pip install --no-cache-dir transcribe-with-whisper ; \
    fi

# Ensure branding assets accompany the installed package for web UI usage
RUN python - <<'PY'
import pathlib
import shutil
import transcribe_with_whisper

package_root = pathlib.Path(transcribe_with_whisper.__file__).resolve().parent.parent
src = pathlib.Path('/app/branding')
dst = package_root / 'branding'

if not src.is_dir():
    print("⚠️ Branding assets not found at /app/branding; skipping copy.")
else:
    if dst.exists():
        shutil.rmtree(dst)
    shutil.copytree(src, dst)
PY

# Create a mount point for user files
VOLUME ["/data"]
WORKDIR /data

# Default entrypoint runs the CLI
ENTRYPOINT ["transcribe-with-whisper"]
CMD ["--help"]
